
	// ================================================AppHandler Method================================================
	/*
	 * this method handles incoming messages from the service
	 * these message include the current state of the service,
	 * or any error messages.
	 */
	private final Handler appHandler = new Handler()
	{

		@Override
		public void handleMessage( Message message )
		{
			switch ( message.what )
			{
				case MESSAGE_STATE_CHANGED:
					switch ( message.arg1 )
					{
						case AppClientService.CONNECTED:
							title.setText(R.string.connected_to);
							title.append(connectDeviceName);
							if ( D )
								Log.i(TAG, "+++ CONNECTED +++");
						break;
						case AppClientService.CONNECTING:
							title.setText(R.string.connecting);
							if ( D )
								Log.i(TAG, "+++ CONNECTING +++");
						break;
						case AppClientService.LISTEN:
						case AppClientService.NONE:
							title.setText(R.string.not_connected);
							if ( D )
								Log.i(TAG, "+++ NOT CONNECTED +++");
						break;
					}
				break;
				case MESSAGE_DEVICE_NAME:
					connectDeviceName = message.getData().getString(DEVICE_NAME);
					Toast.makeText(getApplicationContext(), "Connected to: " + connectDeviceName, Toast.LENGTH_SHORT).show();
					if ( D )
						Log.i(TAG, "+++ TOAST DEVICE NAME +++");
				break;
				case MESSAGE_TOAST:
					Toast.makeText(getApplicationContext(), message.getData().getString(TOAST), Toast.LENGTH_SHORT).show();
					if ( D )
						Log.i(TAG, "+++ TOAST ERROR +++");
				break;
			}

		}
	};