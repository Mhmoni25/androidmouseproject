// package
package itt.t00154755.mouseapp;
// imports
import java.io.IOException;
import java.util.UUID;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.util.Log;

/**
 * 
 * @author Christopher Donovan
 * <p>
 * {@link http://mobisocial.stanford.edu/news/2011/03/bluetooth-across-android-and-a-desktop/}
 * {@link http://developer.android.com/guide/topics/connectivity/bluetooth.html#EnablingDiscoverability}
 */
public class AppClient {

	private static final String TAG = "Android Phone";
	final UUID SPP_UUID = UUID.fromString("0000110100001000800000805f9b34fb");
	BluetoothAdapter btAdapter;
	private boolean available = false;
	String acceloData;
	BluetoothSocket socket;

	public AppClient() 
	{
		btAdapter = BluetoothAdapter.getDefaultAdapter();
	}

	public void connectToSever() 
	{
		try 
		{
			Log.d(TAG, "getting local device");
			// remote MAC here:
			BluetoothDevice device = btAdapter.getRemoteDevice("00:15:83:3D:0A:57");
			ConnectThread ct = new ConnectThread(device);
			ct.start();
		} 
		catch (Exception e) 
		{
			Log.e(TAG, "Error connecting to device", e);
		}
	}

	public boolean isAvailable() 
	{
		return available;
	}
	
	private class ConnectThread extends Thread {
	    private final BluetoothSocket btSocket;
	    private final BluetoothDevice btDevice;
	 
	    public ConnectThread(BluetoothDevice device) {
	        // Use a temporary object that is later assigned to mmSocket,
	        // because mmSocket is final
	        BluetoothSocket tmp = null;
	        btDevice = device;
	 
	        // Get a BluetoothSocket to connect with the given BluetoothDevice
	        try {
	            // MY_UUID is the app's UUID string, also used by the server code
	            tmp = device.createRfcommSocketToServiceRecord(SPP_UUID);
	        } catch (IOException e) { }
	        btSocket = tmp;
	    }
	 
	    public void run() {
	        // Cancel discovery because it will slow down the connection
	        btAdapter.cancelDiscovery();
	 
	        try {
	            // Connect the device through the socket. This will block
	            // until it succeeds or throws an exception
	            btSocket.connect();
	        } catch (IOException connectException) {
	            // Unable to connect; close the socket and get out
	            try {
	                btSocket.close();
	            } catch (IOException closeException) { }
	            return;
	        }
	 
	        // Do work to manage the connection (in a separate thread)
	        ClientCommsThread cct = new ClientCommsThread(btSocket);
	        cct.start();
	    }
	 
	    /** Will cancel an in-progress connection, and close the socket */
	    public void cancel() {
	        try {
	            btSocket.close();
	        } catch (IOException e) { }
	    }
	}

	private class ClientCommsThread extends Thread 
	{
		private static final String TAG = "Client Comms Thread";
		private BluetoothSocket socket;
		private String acceloData;

		public ClientCommsThread(BluetoothSocket socket) 
		{
			System.out.println(TAG);
			this.socket = socket;
		}
		
		public void getTheStringDataFromAccelerometer(String acceloData){
			this.acceloData = acceloData;
		}

		@Override
		public void run() 
		{
			try 
			{
				while (true) 
				{
					try 
					{
						socket.getOutputStream().write(acceloData.getBytes());
					} 
					catch (IOException e) 
					{
						System.err.println(e.getMessage());
					}
				}
			} 
			catch (Exception e) 
			{
				// print the error stack
				e.printStackTrace();
				e.getCause();

			} 
			finally 
			{
				try 
				{
					if (socket != null) 
					{
						socket.close();
					}

				} 
				catch (IOException e) 
				{
					e.printStackTrace();
				}
			}
		}
	}
}