package itt.t00154755.mouseapp;

import java.io.IOException;
import java.util.UUID;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.os.Build;
import android.os.Handler;
import android.util.Log;

/**
 * 
 * @author Christopher
 * 
 *         {@link} http://mobisocial.stanford.edu/news/2011/03/bluetooth-across-android-
 *         and-a-desktop/
 */
@TargetApi ( Build.VERSION_CODES.ICE_CREAM_SANDWICH )
public class AppClient
{

	private static final String TAG = "App Client";
	private static BluetoothAdapter btAdapter = null;
	private static BluetoothSocket btSocket = null;

	private final static int WAITING = 0;
	private final static int CONNECTED = 1;
	// private final int RUNNING = 2;

	private static int state;


	public AppClient( Handler appHandler )
	{
		// get the default adapter
		Log.d(TAG, "getting default adapter");
		btAdapter = BluetoothAdapter.getDefaultAdapter();
		state = WAITING;
	}

	/**
	 * this method tries to connect to the server,
	 * it either create a connection or not
	 */
	private static BluetoothSocket getServerConnection()
	{
		BluetoothDevice btDevice = null;

		Log.d(TAG, "getting local device");
		
		btDevice = btAdapter.getRemoteDevice("00:15:83:3D:0A:57");
		btAdapter.cancelDiscovery();
		
		Log.d(TAG, "connecting to server");
		try
		{
			return btDevice.createInsecureRfcommSocketToServiceRecord(UUID.fromString("27012f0c-68af-4fbf-8dbe-6bbaf7aa432a"));
		}
		catch ( IOException e )
		{
			Log.e(TAG, "error creating the RFCOMM connection");
			return null;
		}
	}


	public void sendData()
	{
		btSocket = getServerConnection();
		try
		{
			while ( state == WAITING )
			{
				Log.d(TAG, "about to connect");
				btSocket.connect();
				if ( btSocket.isConnected() )
				{
					setState(CONNECTED);
				}
				Log.d(TAG, "Connected!");
			}

		}
		catch ( IOException e )
		{
			Log.e(TAG, "error connecting to the server\n" + e.getLocalizedMessage() + "\n" + e.getCause());
			e.printStackTrace();
		}
	}


	/**
	 * @return the state
	 */
	public synchronized int getState()
	{
		return state;
	}


	/**
	 * @param state
	 *        the state to set
	 */
	public synchronized static void setState( int state )
	{
		AppClient.state = state;
	}

	/**
	 * @param btSocket
	 * @throws IOException
	 */
	/*
	 * public synchronized void createClientCommThread( BluetoothSocket socket ) throws IOException
	 * {
	 * clientCommThread = new ClientCommsThread(socket);
	 * clientCommThread.start();
	 * }
	 *//**
	 * 
	 * @param acceloData
	 *        the data packet retrieved from the Accelerometer Updater
	 */
	/*
	 * public void sendDataFromTheAccToTheAppClient( String acceloData )
	 * {
	 * clientCommThread.writeStringToAppClient(acceloData);
	 * }
	 *//**
	 * cancel the currently running thread
	 */
	/*
	 * public void cancel()
	 * {
	 * if ( btSocket != null )
	 * {
	 * try
	 * {
	 * btSocket.close();
	 * }
	 * catch ( IOException e )
	 * {
	 * e.printStackTrace();
	 * }
	 * }
	 * 
	 * if ( clientCommThread != null )
	 * {
	 * clientCommThread.cancel();
	 * clientCommThread = null;
	 * }
	 * 
	 * setState(WAITING);
	 * }
	 */

	/**
	 * 
	 * @author Christopher
	 * 
	 */
	/*
	 * private class ClientCommsThread extends Thread
	 * {
	 * 
	 * private static final String TAG = "Client Comms Thread";
	 * private BluetoothSocket threadSocket = null;
	 * private String acceloData = null;
	 * private boolean isConnected = false;
	 * 
	 * 
	 * @SuppressLint ( "NewApi" )
	 * public ClientCommsThread( BluetoothSocket btSocket )
	 * {
	 * Log.i(TAG, "+++ SET UP THE CLIENT COMM THREAD +++");
	 * threadSocket = btSocket;
	 * if ( threadSocket.isConnected() )
	 * {
	 * isConnected = true;
	 * }
	 * 
	 * }
	 * 
	 * 
	 * public void writeStringToAppClient( String acceloData )
	 * {
	 * // System.out.println(acceloData);
	 * if ( acceloData.length() < 0 || acceloData == null)
	 * {
	 * String defaultData = "1,0,0";
	 * this.acceloData = defaultData;
	 * }
	 * else
	 * {
	 * this.acceloData = acceloData;
	 * }
	 * 
	 * }
	 * 
	 * 
	 * @Override
	 * public void run()
	 * {
	 * 
	 * if ( isConnected )
	 * {
	 * try
	 * {
	 * 
	 * btSocket.getOutputStream().write(acceloData.getBytes());
	 * btSocket.getOutputStream().flush();
	 * btSocket.close();
	 * }
	 * catch ( IOException e )
	 * {
	 * Log.e(TAG, "error writing to the server");
	 * }
	 * }
	 * 
	 * }
	 * 
	 * 
	 * public void cancel()
	 * {
	 * try
	 * {
	 * threadSocket.close();
	 * }
	 * catch ( IOException e )
	 * {
	 * Log.e(TAG, "Cancelling the Client Comm Thread");
	 * Log.e(TAG, "error closing the socket");
	 * }
	 * 
	 * }
	 * }
	 */

}
