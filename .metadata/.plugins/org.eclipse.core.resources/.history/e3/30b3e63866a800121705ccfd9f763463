package itt.t00154755.mouseapp;

import java.util.Timer;
import java.util.TimerTask;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;

/**
 * MyService
 * 
 * @author Nazmul Idris
 * @version 1.0
 * @since Jul 21, 2008, 12:03:01 PM
 */
public class AccelometerService extends Service implements SensorEventListener
{

	public static AppServiceUpdateUIListener UI_UPDATE_LISTENER;
	private static App APP_ACTIVITY;
	
	private static final String TAG = "AcceleratorUpdater Timer";

	private static final boolean D = true;

	private static final int LEFTDOWN = 1;
	private static final int RIGHTUP = 2;
	private static final int LEFTUP = 3;
	private static final int RIGHTDOWN = 4;
	private Timer timer = new Timer();
	private static final long UPDATE_INTERVAL = 100;

	public static void setAPPActivity( App activity )
	{
		APP_ACTIVITY = activity;
	}


	public static void setUpdateListener( AppServiceUpdateUIListener l )
	{
		UI_UPDATE_LISTENER = l;
	}

	/** not using ipc... dont care about this method */
	public IBinder onBind( Intent intent )
	{
		return null;
	}


	@Override
	public void onCreate()
	{
		super.onCreate();

		// init the service here
		startService();

		if ( APP_ACTIVITY != null )
			makeToastShort("MyService started");
	}


	@Override
	public void onDestroy()
	{
		super.onDestroy();

		_shutdownService();

		if ( APP_ACTIVITY != null )
			makeToastShort("MyService stopped");
	}


	private void startService()
	{
		timer.scheduleAtFixedRate(new TimerTask()
		{

			public void run()
			{
				_getWeatherUpdate();
			}
		}, 0, UPDATE_INTERVAL);
		Log.i(getClass().getSimpleName(), "Timer started!!!");
	}


	/** dont forget to fire update to the ui listener */
	private void _getWeatherUpdate()
	{
		// http post to the service
		Log.i(TAG, "background task - start");

		try
		{


		}
		catch ( Exception e ){

			e.printStackTrace();
			Log.e(getClass().getSimpleName(), "", e);
		}

		Log.i(TAG, "background task - end");

		if ( UI_UPDATE_LISTENER != null )
		{
			UI_UPDATE_LISTENER.updateUI(DataFromServlet);
		}
	}
	// Method that registered the Listener for the Accelerometer
		// Object.
		private void registerListener()
		{
			if ( D )
				Log.e(TAG, "+++ REGISTERLISTENER FOR SENSOR +++");
			// sensor manager variables
			SensorManager sm;
			Sensor s;

			// uses the app reference to register the listener
			// i do it this way here because this class those
			// not extend activity the getSystemService()
			// is a method that belongs to the Activity Class
			// so i refer the method to the App Activity which dose
			// extend Activity
			sm = (SensorManager ) app.getSystemService(Context.SENSOR_SERVICE);
			// check to make sure that the SensorList is not empty
			if ( sm.getSensorList(Sensor.TYPE_ACCELEROMETER).size() != 0 )
			{
				// get the Accelerometer Sensor
				s = sm.getSensorList(Sensor.TYPE_ACCELEROMETER).get(0);
				// register the listener to the Sensor
				sm.registerListener(this, s, SensorManager.SENSOR_DELAY_NORMAL);
			}
		}
		
		@Override
		public void onAccuracyChanged( Sensor sensor, int accuracy )
		{
			// TODO Auto-generated method stub
			
		}


		@Override
		public void onSensorChanged( SensorEvent event )
		{
			// TODO Auto-generated method stub
			
		}

	private void _shutdownService()
	{
		if ( timer != null )
			timer.cancel();
		Log.i(TAG, "Timer stopped!!!");
	}

	private void makeToastShort( String string )
	{
		// TODO Auto-generated method stub
		Toast.makeText(this, string, Toast.LENGTH_SHORT).show();
	}


	

}// end class MyService
