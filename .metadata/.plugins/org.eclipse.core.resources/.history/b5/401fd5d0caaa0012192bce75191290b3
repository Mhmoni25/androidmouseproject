package itt.t00154755.mouseapp;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;
import android.view.Display;
import android.view.Surface;
import android.view.WindowManager;

/**
 * AccelometerService
 * 
 * @author Christopher
 * 
 */
public class AccelometerService extends Service implements SensorEventListener
{

	private static final String TAG = "Accelometer Service";
	private static final boolean D = true;
	private String accelerometerData = " 1 0 0 ";
	private SensorEvent event;
	private int xIntAxis;
	private int yIntAxis;
	// sensor movement direction
	public static final int LEFTDOWN = 1;
	public static final int RIGHTUP = 2;
	public static final int LEFTUP = 3;
	public static final int RIGHTDOWN = 4;

	private Context context;
	private Handler appHandler;
	private Thread sendDataThread;

	// sensor manager variables
	private SensorManager accelerometerManager;
	private Sensor accelerometerSensor;

	private boolean isRegistered = false;
	private Display appDisplay;


	public AccelometerService( Context context, Handler appHandler, Display appDisplay )
	{
		this.context = context;
		this.appHandler = appHandler;
		this.appDisplay = appDisplay;
	}


	@Override
	public int onStartCommand( Intent intent, int flags, int startId )
	{
		// TODO: return start sticky this allows the service to run
		// until told otherwise
		return START_STICKY;
	}


	@Override
	public void onCreate()
	{
		// TODO initiate the service
		super.onCreate();
		initAccelometerService();

	}


	@Override
	public void onDestroy()
	{
		// TODO stop the service and the helper thread
		super.onDestroy();
		endAccelometerService();
	}


	public void initAccelometerService()
	{
		makeToastShort("AccelometerService started");
		registerListener();
	}


	public void endAccelometerService()
	{
		unregisterListener();
		// stop the service
		stopSelf();
		makeToastShort("AccelometerService stopped");
	}


	private void makeToastShort( String string )
	{
		// message back to UI
		Message message = appHandler.obtainMessage(App.MESSAGE_TOAST_ACCELO);
		Bundle bundle = new Bundle();
		bundle.putString(App.TOAST, string);
		message.setData(bundle);
		appHandler.handleMessage(message);
	}


	private void sendDataToUIActivity( String string )
	{
		// message back to UI
		Message message = appHandler.obtainMessage(App.MESSAGE_DATA_ACCELO);
		Bundle bundle = new Bundle();
		bundle.putString(App.DATA, string);
		message.setData(bundle);
		appHandler.handleMessage(message);
	}


	/**
	 * @return the accelerometerManager
	 */
	public SensorManager getAccelerometerManager()
	{
		return (SensorManager ) context.getSystemService(Context.SENSOR_SERVICE);
	}


	// Method that registered the Listener for the Accelerometer
	// Object.
	private void registerListener()
	{
		if ( D )
			Log.d(TAG, "+++ REGISTER-LISTENER FOR SENSOR +++");

		accelerometerManager = getAccelerometerManager();
		// check to make sure that the SensorList is not empty
		if ( accelerometerManager.getSensorList(Sensor.TYPE_ACCELEROMETER).size() != 0 )
		{
			// get the Accelerometer Sensor
			accelerometerSensor = accelerometerManager.getSensorList(Sensor.TYPE_ACCELEROMETER).get(0);
			// register the listener to the Sensor
			accelerometerManager.registerListener(this, accelerometerSensor, SensorManager.SENSOR_DELAY_GAME);

			isRegistered = true;
		}
	}


	private void unregisterListener()
	{
		if ( D )
			Log.d(TAG, "+++ UNREGISTER-LISTENER FOR SENSOR +++");

		if ( isRegistered )
		{
			accelerometerManager.unregisterListener(this, accelerometerSensor);
		}

	}


	@Override
	public void onAccuracyChanged( Sensor sensor, int accuracy )
	{
		// not using the accuracy of the sensor
	}


	@Override
	public void onSensorChanged( SensorEvent event )
	{
		if ( D )
			Log.d(TAG, "+++ SENSOR CHANGE +++");
		// long timestamp = event.timestamp;
		sendData(event);
	}
	// javarevisited.blogspot.com/2011/02/how-to-implement-thread-in-java.html#ixzz2R3ICcqPJ
	private class SendDataThread implements Runnable
	{

		public void run()
		{
			sendDataToUIActivity(getAccelerometerData());
		}

	}


	private void sendData( SensorEvent event )
	{
		 this.event = applyFilters(event);;
		// remove the integer x and y values from the float array.

		/*
		 * If Y is Positive and X=0 then the angle is 0
		 * For Quadrant 1 the angle is abs(arctan(X/Y)).
		 * If X is Positive and Y=0 then the angle is 90
		 * For Quadrant 2 the angle is (abs(arctan(Y/X)) + 90)
		 * If Y is negative and X=0 then the angle is 180
		 * For Quadrant 3 the angle is (abs(arctan(X/Y)) + 180)
		 * If X is Negative and Y=0 then the angle is 270
		 * For Quadrant 4 the angle is (abs(arctan(Y/X)) + 270)
		 */

		float xFloatAxis = 0;
		float yFloatAxis = 0;
		

		switch ( appDisplay.getRotation() )
		{
			case Surface.ROTATION_0:
				xFloatAxis = this.event.values[0];
				yFloatAxis = this.event.values[1];
				
			break;
			case Surface.ROTATION_90:
				xFloatAxis = -this.event.values[1];
				yFloatAxis = this.event.values[0];
				applyFilters(event);
			break;
			case Surface.ROTATION_180:
				xFloatAxis = -this.event.values[1];
				yFloatAxis = -this.event.values[0];
				applyFilters(event);
			break;
			case Surface.ROTATION_270:
				xFloatAxis = this.event.values[0];
				yFloatAxis = -this.event.values[1];
				applyFilters(event);
			break;
		}
		
		 applyFilters(event);

		xIntAxis = (int) xFloatAxis;
		yIntAxis = (int) yFloatAxis;
	
		
		if ( xFloatAxis < 0 && yFloatAxis < 0 )
		{
			// add only the positive values
			if ( D )
				Log.d(TAG, "move mouse: " + LEFTDOWN);
			
			
			
			setAccelerometerData(" " + LEFTDOWN + " " + Math.abs(xIntAxis) + " " + Math.abs(yIntAxis) + " ");
		}
		else
			if ( xIntAxis > 0 && yIntAxis > 0 )
			{
				// add only the positive values
				if ( D )
					Log.d(TAG, "move mouse: " + RIGHTUP);
				setAccelerometerData(" " + RIGHTUP + " " + Math.abs(xIntAxis) + " " + Math.abs(yIntAxis) + " ");
			}
			else
				if ( xIntAxis < 0 && yIntAxis > 0 )
				{
					// add only the positive values
					if ( D )
						Log.d(TAG, "move mouse: " + LEFTUP);
					setAccelerometerData(" " + LEFTUP + " " + Math.abs(xIntAxis) + " " + Math.abs(yIntAxis) + " ");
				}
				else
					if ( xIntAxis > 0 && yIntAxis < 0 )
					{
						// add only the positive values
						if ( D )
							Log.d(TAG, "move mouse: " + RIGHTDOWN);
						setAccelerometerData(" " + RIGHTDOWN + " " + Math.abs(xIntAxis) + " " + Math.abs(yIntAxis) + " ");
					}

		sendDataThread = new Thread(new SendDataThread()); // Thread created
		sendDataThread.start();
	}


	/**
	 * @param event
	 * @return 
	 */
	private float[] applyFilters( SensorEvent event )
	{
		// In this example, alpha is calculated as t / (t + dT),
		  // where t is the low-pass filter's time-constant and
		  // dT is the event delivery rate.

		  final float alpha = 0.8f;
		  float[] gravity = event.values;

		  // Isolate the force of gravity with the low-pass filter.
		  gravity[0] = alpha * gravity[0] + (1 - alpha) * event.values[0];
		  gravity[1] = alpha * gravity[1] + (1 - alpha) * event.values[1];
		  gravity[2] = alpha * gravity[2] + (1 - alpha) * event.values[2];

		  
		  float[] linear_acceleration = new float[3];
		  // Remove the gravity contribution with the high-pass filter.
		  linear_acceleration[0] = event.values[0] - gravity[0];
		  linear_acceleration[1] = event.values[1] - gravity[1];
		  linear_acceleration[2] = event.values[2] - gravity[2];
		  
		  return linear_acceleration;
	}


	/**
	 * @return the accelerometerData
	 */
	public String getAccelerometerData()
	{
		return accelerometerData;
	}


	/**
	 * @param accelerometerData
	 *        the accelerometerData to set
	 */
	public void setAccelerometerData( String accelerometerData )
	{
		this.accelerometerData = accelerometerData;
	}


	@Override
	public IBinder onBind( Intent intent )
	{
		// TODO Auto-generated method stub
		return null;
	}

}// end class
