package itt.t00154755.mouseapp;
import android.os.Bundle;
import android.app.Activity;
import java.util.Set;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class CheckBTAvailability extends  Activity {
    protected static final int DISCOVERY_REQUEST = 1;
    private BluetoothAdapter btAdapt;
    public TextView tvStatus;
    public Button bConnect;
    public Button bDisconnect;
    public ImageView ivLogo;
    public String toastText = "";
    public BluetoothDevice remoteDevice;

    BroadcastReceiver bluetoothState = new BroadcastReceiver() {
	@Override
	public void onReceive(Context context, Intent intent) {
	    // String prevStateExtra = BluetoothAdapter.EXTRA_PREVIOUS_STATE;
	    String stateExtra = BluetoothAdapter.EXTRA_STATE;
	    int state = intent.getIntExtra(stateExtra, -1);
	    // int preState = intent.getIntExtra(prevStateExtra, -1);

	    switch (state) {
	    case (BluetoothAdapter.STATE_TURNING_ON): {
		toastText = "Bluetooth is turning on";
		Toast.makeText(BluetoothConnection.this, toastText,
			Toast.LENGTH_SHORT).show();
		break;
	    }
	    case (BluetoothAdapter.STATE_ON): {
		toastText = "Bluetooth is on";
		Toast.makeText(BluetoothConnection.this, toastText,
			Toast.LENGTH_SHORT).show();
		setupUI();
		break;
	    }
	    case (BluetoothAdapter.STATE_TURNING_OFF): {
		toastText = "Bluetooth is turning off";
		Toast.makeText(BluetoothConnection.this, toastText,
			Toast.LENGTH_SHORT).show();
		break;
	    }
	    case (BluetoothAdapter.STATE_OFF): {
		toastText = "Bluetooth is off";
		Toast.makeText(BluetoothConnection.this, toastText,
			Toast.LENGTH_SHORT).show();
		setupUI();
		break;
	    }
	    }
	}
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.checkbt);
	// add the setupUI() method to the onCreate method.
	setupUI();
    }

    private void setupUI() {
	// get the object on the user interface
	final TextView tvStatus = (TextView) findViewById(R.id.currentStatus);
	final Button bConnect = (Button) findViewById(R.id.connect);
	final Button bDisconnect = (Button) findViewById(R.id.disconnect);
	final ImageView ivLogo = (ImageView) findViewById(R.id.logo);

	// set the disconnect button and the Logo off
	bDisconnect.setVisibility(View.GONE);
	ivLogo.setVisibility(View.GONE);

	btAdapt = BluetoothAdapter.getDefaultAdapter();
	if (btAdapt.isEnabled()) {
	    String address = btAdapt.getAddress();
	    String name = btAdapt.getName();
	    String statusText = name + " : " + address;
	    tvStatus.setText(statusText);
	    bDisconnect.setVisibility(View.VISIBLE);
	    ivLogo.setVisibility(View.VISIBLE);
	    bConnect.setVisibility(View.GONE);
	} else {
	    // turn the connect button on
	    bConnect.setVisibility(View.VISIBLE);
	    tvStatus.setText("Bluetooth is Currently Unavailable");
	}

	bConnect.setOnClickListener(new OnClickListener() {

	    @Override
	    public void onClick(View v) 
		{
		String scanModeChange = BluetoothAdapter.ACTION_SCAN_MODE_CHANGED;
		String beDiscoverable = BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE;
		IntentFilter filter = new IntentFilter(scanModeChange);
		registerReceiver(bluetoothState, filter);
		startActivityForResult(new Intent(beDiscoverable),
			DISCOVERY_REQUEST);
	    }

	});

	bDisconnect.setOnClickListener(new OnClickListener() {

	    @Override
	    public void onClick(View v) {
		// this method will turn off the disconnect button
		// and displaying the connect button
		btAdapt.disable();
		bDisconnect.setVisibility(View.GONE);
		ivLogo.setVisibility(View.GONE);
		bConnect.setVisibility(View.VISIBLE);
		tvStatus.setText("Bluetooth Off");
	    }

	});

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	//
	if (requestCode == DISCOVERY_REQUEST) {
	    Toast.makeText(BluetoothConnection.this, "Dicovery in progress",
		    Toast.LENGTH_SHORT).show();
	    setupUI();
	    findDevices();
	}
    }

    private void findDevices() {
	// TODO Auto-generated method stub
	String lastUsedRemoteDevice = getLastUsedRemoteDevice();
	if (lastUsedRemoteDevice != null) {
	    toastText = "Checking for known paired devices, namely: "
		    + lastUsedRemoteDevice;
	    Toast.makeText(BluetoothConnection.this, toastText,
		    Toast.LENGTH_SHORT).show();

	    Set<BluetoothDevice> pairedDevices = btAdapt.getBondedDevices();
	    for (BluetoothDevice pairedDevice : pairedDevices) {
		if (pairedDevice.getAddress().equals(lastUsedRemoteDevice)) {
		    toastText = "Found Device" + pairedDevice.getName() + "@"
			    + lastUsedRemoteDevice;
		    Toast.makeText(BluetoothConnection.this, toastText,
			    Toast.LENGTH_SHORT).show();
		    remoteDevice = pairedDevice;
		}
	    }
	}
	if (remoteDevice == null) {
	    toastText = "Starting discovery for remote devices...";
	    Toast.makeText(BluetoothConnection.this, toastText,
		    Toast.LENGTH_SHORT).show();

	    if (btAdapt.startDiscovery()) {
		toastText = "Discovery thread started... Scanning for devices...";
		Toast.makeText(BluetoothConnection.this, toastText,
			Toast.LENGTH_SHORT).show();
		registerReceiver(discoveryResult, new IntentFilter(
			BluetoothDevice.ACTION_FOUND));
	    }

	}

    }

    BroadcastReceiver discoveryResult = new BroadcastReceiver() {
	public void onReceive(Context context, Intent intent) {
	    String remoteDeviceName = intent
		    .getStringExtra(BluetoothDevice.EXTRA_NAME);
	    // BluetoothDevice remoteDevice;
	    remoteDevice = intent
		    .getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
	    toastText = "Discovered" + remoteDeviceName;
	    Toast.makeText(BluetoothConnection.this, toastText,
		    Toast.LENGTH_SHORT).show();
	}
    };

    private String getLastUsedRemoteDevice() {
	SharedPreferences prefs = getPreferences(MODE_PRIVATE);
	String result = prefs.getString("LAST_REMOTE_DEVICE_ADDRESS", null);
	return result;
    }
