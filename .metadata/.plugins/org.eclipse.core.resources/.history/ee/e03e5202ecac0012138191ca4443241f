// package

package itt.t00154755.mouseserver;

// imports
import java.io.IOException;
import java.io.InputStream;

import javax.bluetooth.BluetoothStateException;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.microedition.io.StreamConnectionNotifier;


/**
 * 
 * @author Christopher Donovan
 *         <p>
 *         This class creates a stream connection using the Bluecove API. The stream listens for a RFComm client once a client is found the stream connection is
 *         closed, to ensure that only one client is connected.
 *         <p>
 *         {@link http://docs.oracle.com/javase/tutorial/networking/index.html}
 *         <p>
 *         {@link http://docs.oracle.com/javase/tutorial/essential/exceptions/index.html}
 * 
 */
public class AppServerListener extends ServerUtils implements Runnable
{

	// string name of class
	private final static String TAG = "App Server";
	private LocalDevice pcDevice = null;
	private int exceptionCode;
	private final String CONNECTION_STRING = "btspp://localhost:27012f0c68af4fbf8dbe6bbaf7aa432a;" +
			"name=Java_Server;authenticate=false;encrypt=false;master=false";


	public AppServerListener()
	{
		try
		{
			// the local device will be the PC / Laptop on
			// which the server is running
			pcDevice = LocalDevice.getLocalDevice();
			pcDevice.setDiscoverable(DiscoveryAgent.GIAC);
		}
		catch ( BluetoothStateException e )
		{
			
			exceptionCode = 1;
			printOutExceptionDetails(TAG, e, exceptionCode);
		}
		System.out.println("\napp server constructor");
	}


	@Override
	public void run()
	{
		// call to create a listening server
		createServerSideListener();
	}


	/**
	 * 
	 */
	private void createServerSideListener()
	{
		StreamConnectionNotifier connNotifier = null;
		StreamConnection connection = null;

		try
		{
			// open a Connector using the CONNECTION_STRING
			connNotifier = (StreamConnectionNotifier ) Connector.open(CONNECTION_STRING);
			// display the details of the local device
			System.out.println(TAG + "...Server Running on : \n ");
			System.out.println("Local Device Name: " + pcDevice.getFriendlyName());
			System.out.println("Local Device MAC: " + pcDevice.getBluetoothAddress());
		}
		catch ( BluetoothStateException e )
		{
			exceptionCode = 2;
			printOutExceptionDetails(TAG, e, exceptionCode);
		}
		catch ( IOException e )
		{
			exceptionCode = 3;
			printOutExceptionDetails(TAG, e, exceptionCode);
		}

		try
		{
			System.out.println("\n...waiting for the client...");
			connection = connNotifier.acceptAndOpen();

		}
		catch ( IOException e )
		{
			exceptionCode = 4;
			printOutExceptionDetails(TAG, e, exceptionCode);
		}
		// if a client is accepted
		InputStream in = null;

		try
		{
			in = connection.openInputStream();
		}
		catch ( IOException e )
		{
			System.out.println("Error creating the Input stream");
		}
		// display the details
		RemoteDevice reDevice = null;
		try
		{
			reDevice = RemoteDevice.getRemoteDevice(connection);

			System.out.println(TAG + "...Server is Connected to: \n"
							   + reDevice.getBluetoothAddress()
							   + "\n"
							   + reDevice.getFriendlyName(false));
		}
		catch ( IOException e )
		{
			exceptionCode = 6;
			printOutExceptionDetails(TAG, e, exceptionCode);
		}

		// start a new Thread that will handle incoming traffic
		Thread serverThread = new Thread(new ServerCommsThread(in));
		serverThread.start();

	}
	
}// end of Class
