// packages

package itt.t00154755.mouseserver;

// imports

import java.awt.AWTException;
import java.awt.HeadlessException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.StringTokenizer;

/**
 * @author Christopher Donovan
 * 
 */
public class CursorRobot extends RobotUtils
{

	private static final String TAG = "Cursor Robot Thread";

	private Robot robot;
	// private static final Point STARTLOCATION = MouseInfo.getPointerInfo().getLocation();

	private String acceloData;
	private int[] convertedValues;
	private Point currentLocation;
	private final static Point STARTLOCATION = new Point(ctrHeight, ctrWidth);

	// sensor movement direction
	public static final int LEFTDOWN = 1;
	public static final int RIGHTUP = 2;
	public static final int LEFTUP = 3;
	public static final int RIGHTDOWN = 4;

	// used to signal which mouse option is selected
	// started an 6 - 9 because the direction value
	// is add to the same type of string that counts 1-4
	public static final int MOUSE_MOVE = 6;
	public static final int RIGHT_BUTTON_CLICK = 7;
	public static final int LEFT_BUTTON_CLICK = 8;
	public static final int SEND_TEXT_CLICK = 9;


	public CursorRobot( )
	{
		initRobot();
	}


	private void initRobot()
	{
		try
		{
			robot = new Robot();
			int checkX = getCurrentX();
			if (checkX == 0)
			{
				setCurrentX(STARTLOCATION.x);
				setCurrentY(STARTLOCATION.y);
			}
		}
		catch ( AWTException eAWT )
		{
			// print the error stack
			System.out.print(TAG + "\n");
			eAWT.printStackTrace();
			eAWT.getCause();
			System.exit(-1);
		}
		
		System.out.println("start position: " + STARTLOCATION.toString());
	}


	public synchronized void startMoving(String data)
	{
		acceloData = data;
		convertedValues = convertStringToIntArray(acceloData);
		
		int state = convertedValues[0];
		if ( state > 0 && state < 5 )
		{
			// move the mouse if the state is between 1 and 4 inclusive
			moveCursor();
		}
		else
		{
			moveClicked(state);
		}
	}


	private synchronized void moveClicked( int state )
	{
		while ( true )
		{
			switch ( state )
			{
				case SEND_TEXT_CLICK:
					robot.keyPress(KeyEvent.VK_ENTER);
					System.out.println(acceloData.subSequence(1, acceloData.length() - 1));
					robot.keyRelease(KeyEvent.VK_ENTER);
				break;
				case LEFT_BUTTON_CLICK:
					robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
					System.out.println("left click");
					robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
				break;
				case RIGHT_BUTTON_CLICK:
					robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);
					System.out.println("right click");
					robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);
				break;
			}
		}

	}


	/**
	 * @throws HeadlessException
	 */
	private synchronized void moveCursor() throws HeadlessException
	{

		System.out.println(TAG + "\nmoving the mouse");
		// the force of the movement
		int direction = convertedValues[0];
		int speed = convertedValues[1];

		while ( true )
		{
			switch ( direction )
			{
				case LEFTDOWN:
					moveLeftDown(speed);
				break;
				case RIGHTUP:
					moveRightUp(speed);
				break;
				case LEFTUP:
					moveLeftUp(speed);
				break;
				case RIGHTDOWN:
					moveRightDown(speed);
				break;
			}
		}
	}


	private void moveRightDown( int speed )
	{
		int currentX = getCurrentX();
		int currentY = getCurrentY();
		
			robot.mouseMove(currentX + speed, currentY - speed);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().x);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().y);
	}


	private void moveLeftUp( int speed )
	{
		int currentX = getCurrentX();
		int currentY = getCurrentY();
			robot.mouseMove(currentX - speed, currentY + speed);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().x);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().y);
	}


	private void moveRightUp( int speed )
	{
		int currentX = getCurrentX();
		int currentY = getCurrentY();
			robot.mouseMove(currentX + speed, currentY + speed);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().x);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().y);
	}


	private void moveLeftDown( int speed )
	{
		int currentX = getCurrentX();
		int currentY = getCurrentY();
			robot.mouseMove(currentX - speed, currentY - speed);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().x);
			setCurrentX(MouseInfo.getPointerInfo().getLocation().y);
	}


	/**
	 * 
	 * @param acceloData
	 * @return
	 */
	private synchronized int[] convertStringToIntArray( String acceloData )
	{
		// TODO: convert the incoming String to an int[] that will
		StringTokenizer st = new StringTokenizer(acceloData);
		int[] data = new int[acceloData.length()];
		int i = 0;
		while ( st.hasMoreTokens() )
		{
			int val = Integer.parseInt(st.nextToken());
			if ( val >= 0 && val <= 9 )
			{
				data[i] = val;
			}
			i++;
		}

		return data;
	}


	/**
	 * @return the currentLocation
	 */
	public synchronized Point getCurrentLocation()
	{
		return currentLocation;
	}


	/**
	 * @param currentLocation
	 *        the currentLocation to set
	 */
	public synchronized void setCurrentLocation( Point currentLocation )
	{

		this.currentLocation = currentLocation;
	}

}// end of class

