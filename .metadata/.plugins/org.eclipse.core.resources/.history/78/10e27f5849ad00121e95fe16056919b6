package itt.t00154755.mouseserver;

import static org.junit.Assert.*;

import java.awt.Robot;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CursorRobotTest
{
	// testing class variables
	private CursorRobot testbot;
	private int xTest;
	private int yTest;
	private String testData;
	private int[] testValues;


	public CursorRobotTest()
	{
		// empty class constructor
	}


	@Before
	public void setUp() throws Exception
	{
		
		// set up the class variables
		testbot = new CursorRobot();
		xTest = 0;
		yTest = 0;
		testData = "testing";
		testValues = null;
	}


	@After
	public void tearDown() throws Exception
	{
	}

	// test the setAcceloData() method to ensure that it
	// set the class variables.
	@Test
	public final void testSetAcceloData()
	{
		this.testData = "test set accelo data";

		assertEquals(this.testData, "test set accelo data");
		System.out.println("testing the setAcceloData() method...");
	}
	
	// test the getCurrentX() method - ensure that it get the current x value.
	@Test
	public final void testGetCurrentX()
	{
		// set the test variable to 200 - using the set method.
		xTest = 200;
		testbot.setCurrentX(xTest);
		// assert that the current value is equals to 200
		assertEquals(testbot.getCurrentX(), 200);
		System.out.println("testing the getCurentX() method...");
	}

	// test the setCurrentX() method - ensure that it sets the current x value.
	@Test
	public final void testSetCurrentX()
	{
		xTest = 200;
		testbot.setCurrentX(xTest);

		assertEquals(xTest, 200);
		System.out.println("testing the setCurentX() method...");

	}


	@Test
	public final void testGetCurrentY()
	{
		yTest = 200;
		testbot.setCurrentY(yTest);

		assertEquals(testbot.getCurrentY(), 200);
		System.out.println("testing the getCurentY() method...");
	}


	@Test
	public final void testSetCurrentY()
	{
		yTest = 200;
		testbot.setCurrentY(yTest);

		assertEquals(yTest, 200);
		System.out.println("testing the setCurentY method...");
	}


	@Test
	public final void testRunForTime()
	{
		long time = System.currentTimeMillis();
		long expTime = time + 10;

		try
		{
			Thread.sleep(10);
		}
		catch ( InterruptedException e )
		{
			// catch the interrupted exception
			e.printStackTrace();
		}

		assertEquals(expTime, System.currentTimeMillis());

		System.out.println("testing the run() Thread time method...");

	}


	@Test
	public final void testRunForNullArray()
	{

		// the current array is null no data has been passed to the setAcceloData method.
		if ( testValues == null )
		{
			System.out.println("testing the run() for null array method...");
		}
		assertEquals(null, testValues);
	}
	
	@Test
	public final void testRunForDirection()
	{
		assertEquals(null, testValues);
		int direction = 2; // move
		String whichDirection = "";
		// move the mouse if the state is between 1 and 4 inclusive
		if ( direction > 0 && direction < 5 )
		{
			System.out.println("move the mouse");
			whichDirection = "move";
		}
		else
		{
			// mouse click
			System.out.println("mouse clicked");
			whichDirection = "click";
		}
		
		assertEquals("move", whichDirection);
	}

}
