package itt.t00154755.mouseapp;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;

/**
 * 
 * @author Christopher
 * 
 *         This is the main activity and the point at which the user interacts
 *         with the application. The Accelerometer data is read from here and
 *         passed on to the client and from the client to the server.
 * 
 */
public class App extends Activity
{
	private static final String	TAG	= "Main App";
	private Button				send;
	private Timer				updateTimer;
	private AppClient			appClient;

	@Override
	protected void onCreate( Bundle savedInstanceState )
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		send = (Button ) findViewById(R.id.send);

		send.setOnClickListener(new Button.OnClickListener()
		{
			@Override
			public void onClick( View v )
			{
				// starts the connection process - server must be running
				Log.i(TAG, "client connecting to server");
				appClient = new AppClient();
				appClient.connectToServer();

				whenConnected();
			}
		});
	}

	@Override
	protected void onStart( )
	{
		super.onStart();
	}

	@Override
	protected void onPause( )
	{
		super.onPause();
	}

	@Override
	protected void onStop( )
	{
		super.onStop();
		if ( updateTimer != null )
		{
			updateTimer.cancel();
		}
	}

	private void whenConnected( )
	{
		Log.d(TAG, "starting the update timer, updates every .001 of a second");
		updateTimer = new Timer();
		updateTimer.schedule(new AcceleratorUpdater(new Handler(), this), 250,
				32);

	}

	protected void passStringDataToServer( String acceloData )
			throws IOException
	{
		// pass the string which contains the data array to the server

		appClient.writeOutToTheServer(acceloData);
		Log.i(TAG, "data st 1 " + acceloData);
	}

	@Override
	public boolean onCreateOptionsMenu( Menu menu )
	{
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.app, menu);
		return true;
	}

	private class AcceleratorUpdater extends TimerTask implements
			SensorEventListener
	{

		Handler	accHandler;
		App		app;
		String	acceloData;

		public AcceleratorUpdater ( Handler accHandler, App app )
		{
			super();
			this.accHandler = accHandler;
			this.app = app;

			Log.d(TAG, "In AcceleratorUpdater update const");
			registerListener();
		}

		private void registerListener( )
		{
			// sensor manager variables
			SensorManager sm;
			Sensor s;

			Log.d(TAG, "In AcceleratorUpdater reg listener");
			sm = (SensorManager ) getSystemService(Context.SENSOR_SERVICE);

			if ( sm.getSensorList(Sensor.TYPE_ACCELEROMETER).size() != 0 )
			{
				s = sm.getSensorList(Sensor.TYPE_ACCELEROMETER).get(0);
				sm.registerListener(this, s, SensorManager.SENSOR_DELAY_NORMAL);
			}
		}

		@Override
		public void onAccuracyChanged( Sensor sensor, int accuracy )
		{

		}

		@Override
		public void onSensorChanged( SensorEvent event )
		{
			//
			Log.d(TAG, "In sensorchanged of of AcceleratorUpdater");
			// alpha is calculated as t / (t + dT)
			// with t, the low-pass filter's time-constant
			// and dT, the event delivery rate

			final float alpha = 0.8f;

			float[] gravity = new float[3];
			gravity[0] = alpha * gravity[0] + ( 1 - alpha ) * event.values[0];
			gravity[1] = alpha * gravity[1] + ( 1 - alpha ) * event.values[1];
			gravity[2] = alpha * gravity[2] + ( 1 - alpha ) * event.values[2];

			float[] linear_acceleration = new float[3];
			linear_acceleration[0] = event.values[0] - gravity[0];
			linear_acceleration[1] = event.values[1] - gravity[1];
			linear_acceleration[2] = event.values[2] - gravity[2];

			covertFloatArrayToIntegerArray(linear_acceleration);
		}

		private void covertFloatArrayToIntegerArray( float[] linear_acceleration )
		{
			int xIntAxis = (int ) linear_acceleration[0];
			int yIntAxis = (int ) linear_acceleration[1];

			acceloData = "" + Math.abs(xIntAxis) + "," + Math.abs(yIntAxis);

			setAcceloData(acceloData);
			Log.d(TAG, acceloData);
		}

		/**
		 * Used to create a new String of events each time that
		 * onSensorChanged() is called.
		 * 
		 * @param event
		 *            the SensorEvent from the accelerometer sensor
		 * @return acceloData the string representation of the array events
		 */

		@Override
		public void run( )
		{
			Log.d(TAG, "In AcceleratorUpdater run");
			accHandler.post(new Runnable()
			{
				@Override
				public void run( )
				{

					try
					{
						app.passStringDataToServer(getAcceloData());
						// updateTimer.cancel();
					} catch ( IOException e )
					{
						// print the error stack
						e.printStackTrace();
						e.getCause();
						System.exit(-1);
					}

				}
			});
		}

		public String getAcceloData( )
		{
			return acceloData;
		}

		public void setAcceloData( String acceloData )
		{
			this.acceloData = acceloData;
		}
	}
}// end of the class