// packages
package itt.t00154755.mouseserver;

// imports
import java.awt.AWTException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;

/**
 * 
 * @author Christopher Donovan
 * 
 */
public class CursorRobot
{
	private static final String	TAG		= "Server Communication Thread";
	private Robot	robot;
	private String				acceloData;
	private int					moveX;
	private int					moveY;

	public CursorRobot (String acceloData )
	{
		this.acceloData = acceloData;
		initCursorRobot();
		
	}


	private void initCursorRobot( )
	{
		int[] convertedString = covertStringToIntArray( acceloData );
		this.moveX = convertedString[0];
		this.moveY = convertedString[1];
		
		moveTheMouseToNewPosition(moveX, moveY);
	}

	private void moveTheMouseToNewPosition( int moveX, int moveY )
	{
		
		int		startX, startY;
		String	acceloData;

			try
			{
				robot = new Robot();

				Point startLocation = MouseInfo.getPointerInfo().getLocation();
				startX = startLocation.x;
				startY = startLocation.y;
			} catch ( AWTException e1 )
			{
				e1.printStackTrace();
			}
		
	}


	public void sendToRobot( String acceloData )
	{
		this.acceloData = acceloData;
	}

	private synchronized int[] covertStringToIntArray( String acceloData )
	{
		String delims = "[,]";
		String[] tokens = acceloData.split(delims);
		int[] data = new int[tokens.length];

		for ( int i = 0; i < tokens.length; i++ )
		{
			try
			{
				data[i] = Integer.parseInt(tokens[i]);
			} catch ( NumberFormatException nfe )
			{
				// print the error stack
				System.out.print(TAG + "\n");
				nfe.printStackTrace();
				nfe.getCause();
				System.exit(-1);
			}
		}
		return data;
	}
	/*
	 * this thread will allow the data passed from the accelerometer to control
	 * the on screen cursor via the Robot object
	 */
	public class MouseMoveThread extends Thread
	{
		//
		


		@Override
		public void run( )
		{
			int[] accData = covertStringToIntArray(acceloData);
			int currentX = startX;
			int currentY = startY;

			while ( true )
			{
				int moveToX = currentX + accData[0];
				int moveToY = currentY + accData[1];

				robot.mouseMove(moveToX, moveToY);
				try
				{
					Thread.sleep(100);
				} catch ( InterruptedException exc )
				{
					exc.printStackTrace();
				}
			}// end of loop
		}
	}

}// end of class

