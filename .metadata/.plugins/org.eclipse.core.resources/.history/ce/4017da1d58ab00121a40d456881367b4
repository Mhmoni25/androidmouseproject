// packages

package itt.t00154755.mouseserver;

// imports

import java.awt.AWTException;
import java.awt.HeadlessException;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.StringTokenizer;

/**
 * @author Christopher Donovan
 * 
 */
public class CursorRobot extends RobotUtils
{

	private static final String TAG = "Cursor Robot Thread";

	private Robot robot;
	// private static final Point STARTLOCATION = MouseInfo.getPointerInfo().getLocation();
	private MoveCursorThread moveCursorThread;
	private final static Point STARTLOCATION = new Point(ctrHeight, ctrWidth);

	// sensor movement direction
	public static final int LEFTDOWN = 1;
	public static final int RIGHTUP = 2;
	public static final int LEFTUP = 3;
	public static final int RIGHTDOWN = 4;

	// used to signal which mouse option is selected
	// started an 6 - 9 because the direction value
	// is add to the same type of string that counts 1-4
	public static final int MOUSE_MOVE = 6;
	public static final int RIGHT_BUTTON_CLICK = 7;
	public static final int LEFT_BUTTON_CLICK = 8;
	public static final int SCROOL_WHEEL_CLICK = 9;


	public CursorRobot()
	{
		initRobot();
	}


	private void initRobot()
	{
		try
		{
			robot = new Robot();
			// setCurrenttLocation(STARTLOCATION);
			// addMouseMotionListener(robot);
			// addMouseListener(robot);
		}
		catch ( AWTException eAWT )
		{
			// print the error stack
			System.out.print(TAG + "\n");
			eAWT.printStackTrace();
			eAWT.getCause();
			System.exit(-1);
		}
	}


	/**
	 * @param btSocket
	 *        the currently open blue-tooth socket
	 * @throws IOException
	 *         if the socket is not open
	 */
	public synchronized void createMoveCursorThread( String data ) throws IOException
	{
		moveCursorThread = new MoveCursorThread(data);
		moveCursorThread.start();
	}

	/**
	 * @author Christopher
	 * 
	 */
	private class MoveCursorThread extends Thread implements MouseListener
	{

		private String acceloData;
		private int[] convertedValues;
		private Point currentLocation;
		private Point lastLocation;

		public MoveCursorThread( String data )
		{
			acceloData = data;
			this.convertedValues = covertStringToIntArray(acceloData);
			setCurrentLocation(MouseInfo.getPointerInfo().getLocation());
		}


		@Override
		public synchronized void run()
		{
			int state = convertedValues[0];
			if ( state > 0 && state < 5 )
			{
				// move the mouse if the state is between 1 and 4 inclusive
				moveCursor();
			}
			else
			{
				moveClicked(state);
			}
		}


		private void moveClicked( int state )
		{
			switch ( state )
			{
				case SCROOL_WHEEL_CLICK:
					robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);
					System.out.println("scrool");
					robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
				break;
				case LEFT_BUTTON_CLICK:
					robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);
					System.out.println("left");
					robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);
				break;
				case RIGHT_BUTTON_CLICK:
					robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);
					System.out.println("right");
					robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);
				break;
			}
		}


		/**
		 * @throws HeadlessException
		 */
		private synchronized void moveCursor() throws HeadlessException
		{

			System.out.println(TAG + "\nmoving the mouse");
			// the force of the movement
			int direction = convertedValues[0];
			int moveX = convertedValues[1];
			int moveY = convertedValues[1];

			// the current location of the cursor
			Point currLoc = getCurrentLocation();
			int currX = currLoc.x;
			int currY = currLoc.y;

			while ( true )
			{
				switch ( direction )
				{
					case LEFTDOWN:
						moveLeftDown(moveX, moveY, currX, currY);
					break;
					case RIGHTUP:
						moveRightUp(moveX, moveY, currX, currY);
					break;
					case LEFTUP:
						moveLeftUp(moveX, moveY, currX, currY);
					break;
					case RIGHTDOWN:
						moveRightDown(moveX, moveY, currX, currY);
					break;
				}
			}
		}


		/**
		 * @param moveX
		 * @param moveY
		 * @param currX
		 * @param currY
		 * @throws HeadlessException
		 */
		private void moveRightDown( int moveX, int moveY, int currX, int currY ) throws HeadlessException
		{
			int moveToX;
			int moveToY;
			// amount to move = force + current
			moveToX = currX + moveX + getLastLocation().x;
			moveToY = currY - moveY + getLastLocation().y;

			System.out.println("move rd: " + moveToX + ", " + moveToY);
			robot.mouseMove(moveToX, moveToY);
			setLastLocation(MouseInfo.getPointerInfo().getLocation());
		}


		/**
		 * @param moveX
		 * @param moveY
		 * @param currX
		 * @param currY
		 * @throws HeadlessException
		 */
		private void moveLeftUp( int moveX, int moveY, int currX, int currY ) throws HeadlessException
		{
			int moveToX;
			int moveToY;
			// amount to move = force + current
			moveToX = currX - moveX + getLastLocation().x;
			moveToY = currY + moveY + getLastLocation().y;

			System.out.println("move lu: " + moveToX + ", " + moveToY);
			robot.mouseMove(moveToX, moveToY);
			setLastLocation(CursorRobot.STARTLOCATION);
		}


		/**
		 * @param moveX
		 * @param moveY
		 * @param currX
		 * @param currY
		 * @throws HeadlessException
		 */
		private void moveRightUp( int moveX, int moveY, int currX, int currY ) throws HeadlessException
		{
			int moveToX;
			int moveToY;
			// amount to move = force + current
			moveToX = currX + moveX + getLastLocation().x;
			moveToY = currY + moveY + getLastLocation().y;

			System.out.println("move ru: " + moveToX + ", " + moveToY);
			robot.mouseMove(moveToX, moveToY);
			setLastLocation(MouseInfo.getPointerInfo().getLocation());
		}


		/**
		 * @param moveX
		 * @param moveY
		 * @param currX
		 * @param currY
		 * @throws HeadlessException
		 */
		private void moveLeftDown( int moveX, int moveY, int currX, int currY ) throws HeadlessException
		{
			int moveToX;
			int moveToY;
			// amount to move = force + current
			moveToX = currX - moveX + getLastLocation().x;
			moveToY = currY - moveY + getLastLocation().y;
			System.out.println("move ld: " + moveToX + ", " + moveToY);
			robot.mouseMove(moveToX, moveToY);
			setLastLocation(MouseInfo.getPointerInfo().getLocation());
		}


		/**
		 * 
		 * @param acceloData
		 * @return
		 */
		private synchronized int[] covertStringToIntArray( String acceloData )
		{
			// TODO: convert the incoming String to an int[] that will
			StringTokenizer st = new StringTokenizer(acceloData);
			int[] data = new int[acceloData.length()];
			int i = 0;
			while ( st.hasMoreTokens() )
			{
				int val = Integer.parseInt(st.nextToken());
				if ( val >= 0 && val <= 9 )
				{
					data[i] = val;
				}
				i++;
			}

			return data;
		}


		/**
		 * @return the currentLocation
		 */
		public synchronized Point getCurrentLocation()
		{
			return currentLocation;
		}


		/**
		 * @param currentLocation
		 *        the currentLocation to set
		 */
		public synchronized void setCurrentLocation( Point currentLocation )
		{

			this.currentLocation = currentLocation;
		}


		/**
		 * @return the lastLocation
		 */
		public Point getLastLocation()
		{
			return lastLocation;
		}


		/**
		 * @param lastLocation
		 *        the lastLocation to set
		 */
		public void setLastLocation( Point lastLocation )
		{
			this.lastLocation = lastLocation;
		}


		@Override
		public void mouseClicked( MouseEvent me )
		{
			// TODO Auto-generated method stub

		}


		@Override
		public void mouseEntered( MouseEvent me )
		{
			// TODO Auto-generated method stub

		}


		@Override
		public void mouseExited( MouseEvent me )
		{
			// TODO Auto-generated method stub

		}


		@Override
		public void mousePressed( MouseEvent me )
		{
			// TODO Auto-generated method stub

		}


		@Override
		public void mouseReleased( MouseEvent me )
		{
			// TODO Auto-generated method stub

		}
	}
}// end of class

