/**
 * 
 */
package itt.t00154755.mouseapp;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.AsyncTask;
import android.os.Handler;
import android.util.Log;

/**
 * @author Christopher Donovan
 * 
 * This Thread is used to calibrate the threshold value, this value is used
 * as the zero value.  The Threshold value is taken by sampling the accelerometer
 * values and finding the average value by dividing the total by the number of samples.
 * 
 * This value is then set as the zero value and anything value greater a use as
 * positive values or less than the threshold are negivite.  The phone must be
 * in a resting position on a flat surface. 
 *
 */
public class CalibrateThesholdTask extends AsyncTask<Void, Void, String> implements SensorEventListener{
	
	// this is a reference to the class that calls this asynctask
	private CheckBTAvailability cba;
	private static final String TAG = "CalibrateTheshold Sampling Process";
	// sensor manager variables
	private SensorManager sm;
	private Sensor s;
	private long startTimer = System.currentTimeMillis();
	private long endTimer = startTimer + 100;
	// the threshold value for the application
	private String thresholdString;
	private float threshold;
	private Handler ctHandler;
	/**
	 * 
	 */
	public CalibrateThesholdTask(CheckBTAvailability cba) {
		this.cba = cba;
		registerListener();
	}
@Override
protected void onPreExecute() {
	// TODO Auto-generated method stub
	super.onPreExecute();
	cba.tvCaliDetails.setText("Starting the Calibartion Process...\nDo not vibrate the phone");
}
	@Override
	protected String doInBackground(Void... params) {
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			// 
			e.printStackTrace();
		}
		if (startTimer != endTimer)
		{
			ctHandler.post(new Runnable()
			{
				@Override
				public void run() 
				{
					String thresholdString = String.valueOf(getThreshold());
					cba.displayTheshold(thresholdString);
				}
			});
		}
		else
		{
			sm.unregisterListener(this);
		}
		
		return thresholdString;
	}
	
	@Override
	protected void onProgressUpdate(Void... values) {
		// TODO Auto-generated method stub
		super.onProgressUpdate(values);
	}
	@Override
	protected void onPostExecute(String result) {
		// TODO Auto-generated method stub
		super.onPostExecute(result);
	}
	private void registerListener() 
	{
		Log.d(TAG, "In AcceleratorUpdater reg listener");
		sm = (SensorManager) cba.getSystemService(Context.SENSOR_SERVICE);

		if (sm.getSensorList(Sensor.TYPE_ACCELEROMETER).size() != 0) 
		{
			s = sm.getSensorList(Sensor.TYPE_ACCELEROMETER).get(0);
			sm.registerListener(this, s, SensorManager.SENSOR_DELAY_NORMAL);
		}
	}
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) 
	{
		//
	}

	@Override
	public void onSensorChanged(SensorEvent event)
	{
		float x = calibrateX(event.values[0]);
		float y = calibrateY(event.values[1]);
		
		float threshold = x/y;
		
		setThreshold(threshold);
	}
	
	private float calibrateX( float x )
	{
		boolean calibrating = true;
		float calX = 0;
		int count = 0;
		
		while ( calibrating )
		{
			calX += x;
			count++;
			if ( count == 100 )
			{
				calibrating = false;
			}
		}
		
		calX = ( calX / count );

		return calX;
	}
	
	private float calibrateY( float y )
	{
		
		boolean calibrating = true;
		float calY = 0;
		int count = 0;
		
		while ( calibrating )
		{
			calY += y;
			count++;
			if ( count == 100 )
			{
				calibrating = false;
			}
		}
		
		calY = ( calY / count );
		
		return calY;
	}
	
	public void setThreshold(float threshold)
	{
		this.threshold = threshold;
	}
	public float getThreshold()
	{
		return threshold;
	}
	
	public void run()
	{
		
		
	}

}
