// package
package itt.t00154755.mouseserver;

// imports
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.bluetooth.BluetoothStateException;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.microedition.io.StreamConnectionNotifier;

/**
 * 
 * @author Christopher Donovan
 *         <p>
 *         This class creates a stream connection using the Bluecove API. The
 *         stream listens for a RFComm client once a client is found the stream
 *         connection is closed, to ensure that only one client is connected.
 *         <p>
 *         {@link http://docs.oracle.com/javase/tutorial/networking/index.html}
 *         <p>
 *         {@link http
 *         ://docs.oracle.com/javase/tutorial/essential/exceptions/index.html}
 * 
 */
public class AppServer extends Thread 
{
	// string name of class
	private final String TAG = "App Server";
	private final String connString = "btspp://localhost:"
			+ "27012f0c68af4fbf8dbe6bbaf7aa432a;name=Java Server;"
			+ "authenticate=false;encrypt=false;master=false";
	StreamConnectionNotifier connectionNotifier;
	StreamConnection streamConnection;
	private InputStream dataIn;
	private boolean isOpened = false;
	private ArrayList<ServerCommsThread> clients;
	
	public AppServer() throws BluetoothStateException
	{
		clients = new ArrayList<ServerCommsThread>();
		
		initLocalDevice();
		createConnection();
		addClient();
		
	}
	
	private void initLocalDevice( )
	{
		try
		{
			LocalDevice pcDevice = LocalDevice.getLocalDevice();
			System.out.println(TAG + "...Server Running on : \n ");
			System.out.println("Local Device Name: "+ pcDevice.getFriendlyName());
			System.out.println("Local Device MAC: "+ pcDevice.getBluetoothAddress());
		} catch ( BluetoothStateException bse )
		{
			// TODO Auto-generated catch block
			bse.printStackTrace();
		}
		
	}
	
	private void createConnection( )
	{
		try 
		{
			connectionNotifier = (StreamConnectionNotifier) Connector.open(connString);
		} 
		catch (IOException e) 
		{
			// print the error stack
			e.printStackTrace();
			e.getCause();
			System.exit(-1);
		}
		
	}
	
	private void addClient( )
	{
		try
		{
			streamConnection = connectionNotifier.acceptAndOpen();
		} 
		catch (IOException e) 
		{
			// print the error stack
			e.printStackTrace();
			e.getCause();
			System.exit(-1);
		}
		
		ServerCommsThread client = new ServerCommsThread(streamConnection);  
        // create client handler
		clients.add(client);
		client.start();
		 
		 
		RemoteDevice reDevice;
		try {
			reDevice = RemoteDevice.getRemoteDevice(streamConnection);
			
			System.out.println(TAG + "...Server is Connected to: \n" 
					+ reDevice.getBluetoothAddress()
					+ "\n" + reDevice.getFriendlyName(true));
			
		} catch (IOException e) {
			// print the error stack
			e.printStackTrace();
			e.getCause();
			System.exit(-1);
		};
	}

	public void run() 
	{
		
		
		 
		+ pcDevice.getBluetoothAddress()
		+ "\n" + pcDevice.getFriendlyName());
		
		 = null;
		
		
		setDataIn(null);
		try 
		{
			setDataIn(new DataInputStream(streamConnection.openInputStream()));
			isOpened = true;
		} 
		catch (IOException e)
		{
			// print the error stack
			e.printStackTrace();
			e.getCause();
			System.exit(-1);
		}
		
	}
	
	public InputStream getDataIn( )
	{
		return dataIn;
	}

	public void setDataIn( InputStream dataIn )
	{
		this.dataIn = dataIn;
	}
}// end of Class
