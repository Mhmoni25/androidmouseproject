package itt.t00154755.mouseapp;

import java.io.IOException;
import java.util.UUID;

import android.annotation.TargetApi;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.os.Build;
import android.util.Log;

/**
 * 
 * @author Christopher
 * 
 *         {@link} http://mobisocial.stanford.edu/news/2011/03/bluetooth-across-android-
 *         and-a-desktop/
 */
public class AppClient
{
	private static final String TAG = "App Client";
	private BluetoothAdapter btAdapter = null;
	private BluetoothSocket btSocket = null;
	private ClientCommsThread clientCommThread = null;
	private String acceloData = null;
	
	
	public AppClient()
	{
		// get the default adapter
		Log.d(TAG, "getting default adapter");
		btAdapter = BluetoothAdapter.getDefaultAdapter();
	}


	@TargetApi ( Build.VERSION_CODES.GINGERBREAD_MR1 )
	public void connectToSever()
	{
		BluetoothDevice btDevice = null;
		try
		{
			Log.d(TAG, "getting local device");
			btDevice = btAdapter.getRemoteDevice("00:15:83:3D:0A:57");
			Log.d(TAG, "connecting to service");
			btSocket = btDevice.createInsecureRfcommSocketToServiceRecord(UUID.fromString("27012f0c-68af-4fbf-8dbe-6bbaf7aa432a"));
			Log.d(TAG, "about to connect");

			btAdapter.cancelDiscovery();
			btSocket.connect();
			Log.d(TAG, "Connected!");

			writeOutToTheServer(btSocket);
		}
		catch ( Exception e )
		{
			Log.e(TAG, "Error connecting to device", e);
		}
	}

	
	public void writeMessageToAppClient( String acceloData )
	{
		this.acceloData = acceloData;
		setAcceloData(acceloData);

	}

	/**
	 * @return the acceloData
	 */
	public String getAcceloData()
	{
		return acceloData;
	}


	
	/**
	 * @param acceloData the acceloData to set
	 */
	public void setAcceloData( String acceloData )
	{
		this.acceloData = acceloData;
	}
	
	
	public void cancel()
	{
		if (clientCommThread != null)
		{
			clientCommThread.cancel();
			clientCommThread = null;
		}
		
	}


	/**
	 * @param btSocket
	 * @throws IOException
	 */
	public void writeOutToTheServer( BluetoothSocket socket ) throws IOException
	{
		
		String accData = getAcceloData();
		clientCommThread = new ClientCommsThread(socket, accData);
		clientCommThread.start();

	}
	
	
	/**
	 * 
	 * @author Christopher
	 *
	 */
	private class ClientCommsThread extends Thread
	{

		private static final String TAG = "Client Comms Thread";
		private BluetoothSocket socket;
		private String acceloData;


		public ClientCommsThread( BluetoothSocket socket, String acceloData )
		{
			System.out.println(TAG);
			this.socket = socket;
			this.acceloData = acceloData;
		}


		public void cancel()
		{
			// TODO Auto-generated method stub
			
		}


		@Override
		public void run()
		{
			try
			{
				while ( true )
				{
					try
					{
						socket.getOutputStream().write(acceloData.getBytes());
					}
					catch ( IOException e )
					{
						System.err.println(e.getMessage());
					}
				}
			}
			catch ( Exception e )
			{
				// print the error stack
				e.printStackTrace();
				e.getCause();

			}
			finally
			{
				try
				{
					if ( socket != null )
					{
						socket.close();
					}

				}
				catch ( IOException e )
				{
					e.printStackTrace();
				}
			}

		}
	}

}
