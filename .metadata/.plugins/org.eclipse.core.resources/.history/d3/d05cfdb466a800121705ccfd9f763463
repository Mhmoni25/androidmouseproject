package itt.t00154755.mouseapp;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

/**
 * 
 * @author Christopher Donovan
 * 
 */
public class AccelerometerUpdaterService implements SensorEventListener
{

	private static final String TAG = "AcceleratorUpdater Timer";

	private static final boolean D = true;

	private static final int LEFTDOWN = 1;
	private static final int RIGHTUP = 2;
	private static final int LEFTUP = 3;
	private static final int RIGHTDOWN = 4;

	// Reference back to the Main UI Thread Activity
	private App app = null;

	// The String that will contain the data from the
	// Accelerometer Object
	private String acceloData = null;

	private Handler updateHandler = null;

	private Handler appHandler = null;


	/**
	 * Constructor for the AcceleratorUpdater Class.
	 * 
	 * @param accHandler
	 *        the handler used to communicate with the Main UI Thread
	 * @param app
	 *        reference to the creator of the Handler object
	 */
	public AccelerometerUpdaterService(App app, Handler appHandler)
	{
		if ( D )
			Log.e(TAG, "+++ ACCELEROMETER-UPDATER +++");
		this.app = app;
		this.appHandler  = appHandler;
		// register the listener for the Accelerometer Object
		registerListener();
		
		updateHandler = new Handler();
		updateHandler.postDelayed(dataUpdater, 100);
	}


	// Method that registered the Listener for the Accelerometer
	// Object.
	private void registerListener()
	{
		if ( D )
			Log.e(TAG, "+++ REGISTERLISTENER FOR SENSOR +++");
		// sensor manager variables
		SensorManager sm;
		Sensor s;

		// uses the app reference to register the listener
		// i do it this way here because this class those
		// not extend activity the getSystemService()
		// is a method that belongs to the Activity Class
		// so i refer the method to the App Activity which dose
		// extend Activity
		sm = (SensorManager ) app.getSystemService(Context.SENSOR_SERVICE);
		// check to make sure that the SensorList is not empty
		if ( sm.getSensorList(Sensor.TYPE_ACCELEROMETER).size() != 0 )
		{
			// get the Accelerometer Sensor
			s = sm.getSensorList(Sensor.TYPE_ACCELEROMETER).get(0);
			// register the listener to the Sensor
			sm.registerListener(this, s, SensorManager.SENSOR_DELAY_NORMAL);
		}
	}


	@Override
	public void onAccuracyChanged( Sensor sensor, int accuracy )
	{

		// i do not use this method
		// but it must be implemented
	}


	/**
	 * Used to create a new String of events each time that onSensorChanged() is
	 * called.
	 * 
	 * @param event
	 *        the SensorEvent from the accelerometer sensor
	 * @return acceloData the string representation of the array events
	 */
	@Override
	public void onSensorChanged( SensorEvent event )
	{
		if ( D )
			Log.e(TAG, "+++ SENSOR CHANGE +++");

		covertFloatArrayToIntegerArray(event.values);
	}


	private synchronized void covertFloatArrayToIntegerArray( float[] eventValues )
	{
		if ( D )
			Log.e(TAG, "+++ CONVERTING THE DATA TO INT +++");
		// remove the integer x and y values from the float array.
		int xIntAxis = (int ) eventValues[0];
		int yIntAxis = (int ) eventValues[1];

		if ( xIntAxis < 0 && yIntAxis < 0 )
		{
			// add only the positive values
			acceloData = "" + LEFTDOWN + "," + Math.abs(xIntAxis) + "," + Math.abs(yIntAxis) + "\n";
		}
		else
			if ( xIntAxis > 0 && yIntAxis > 0 )
			{
				// add only the positive values
				acceloData = "" + RIGHTUP + "," + Math.abs(xIntAxis) + "," + Math.abs(yIntAxis) + "\n";
			}
			else
				if ( xIntAxis < 0 && yIntAxis > 0 )
				{
					// add only the positive values
					acceloData = "" + LEFTUP + "," + Math.abs(xIntAxis) + "," + Math.abs(yIntAxis) + "\n";
				}
				else
					if ( xIntAxis > 0 && yIntAxis < 0 )
					{
						// add only the positive values
						acceloData = "" + RIGHTDOWN + "," + Math.abs(xIntAxis) + "," + Math.abs(yIntAxis) + "\n";
					}

		setAcceloData(acceloData);
	}


	// get and set methods for the String Object
	public synchronized String getAcceloData()
	{

		return acceloData;
	}


	public synchronized void setAcceloData( String acceloData )
	{
		if ( acceloData == null || acceloData.length() > 0 )
		{
			Log.i(TAG, acceloData);
			String defaultData = "1,0,0";
			this.acceloData = defaultData;
		}
		else
		{
			Log.i(TAG, acceloData);
			this.acceloData = acceloData;
		}
		if ( D )
			Log.e(TAG, "+++ SET DATA STRING +++\nData: " + acceloData);

	}

	private Runnable dataUpdater = new Runnable()
	{
		@Override
		public void run()
		{
			if ( D )
				Log.e(TAG, "+++ DataUpdater +++");
			// message back to UI
			Message message = appHandler.obtainMessage(App.UPDATE_DATA);
			Bundle bundle = new Bundle();
			String accData = getAcceloData();
			bundle.putString(App.DATA, accData);
			message.setData(bundle);
			appHandler.handleMessage(message);


			updateHandler.postDelayed(this, 100);
		}
	};


	public void cancel()
	{
		updateHandler.removeCallbacks(dataUpdater);
		
	}

}
