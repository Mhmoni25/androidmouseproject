// package

package itt.t00154755.mouseserver;

// imports
import java.io.IOException;
import javax.bluetooth.BluetoothStateException;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;
//import javax.bluetooth.RemoteDevice;
import javax.bluetooth.UUID;
import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import javax.microedition.io.StreamConnectionNotifier;

/**
 * 
 * @author Christopher Donovan
 *         <p>
 *         This class creates a stream connection using the Bluecove API. The stream listens for a RFComm client once a client is found the stream connection is
 *         closed, to ensure that only one client is connected.
 *         <p>
 *         {@link http://docs.oracle.com/javase/tutorial/networking/index.html}
 *         <p>
 *         {@link http
 *         ://docs.oracle.com/javase/tutorial/essential/exceptions/index.html}
 * 
 */
public class AppServer extends Thread
{

	// string name of class
	private final String TAG = "App Server";
	private final UUID SPP_UUID = new UUID("00001101-0000-1000-8000-00805F9B34FB", true);

	public AppServer()
	{
		System.out.println("app server constructor");
	}


	@Override
	public void run()
	{
		createConnection();
	}


	private void createConnection()
	{

		LocalDevice pcDevice = null;
		

		StreamConnectionNotifier connNotifier = null;
		StreamConnection connection;
		try
		{
			pcDevice = LocalDevice.getLocalDevice();
			pcDevice.setDiscoverable(DiscoveryAgent.GIAC);

			 
			//UUID uuid = new UUID("1101", false);
			// 00000003-0000-1000-8000-00805F9B34FB - RFCOMM
			// 00001101-0000-1000-8000-00805F9B34FB - SPP
			String connString = "btspp://localhost:" + SPP_UUID + ";name=Java_Server";

			connNotifier = (StreamConnectionNotifier ) Connector.open(connString);

			System.out.println(TAG + "...Server Running on : \n ");
			System.out.println("Local Device Name: " + pcDevice.getFriendlyName());
			System.out.println("Local Device MAC: " + pcDevice.getBluetoothAddress());
			
			while ( true )
			{
				try
				{
					System.out.println("...waiting for the client...");
					connection = connNotifier.acceptAndOpen();
					
					try
					{
						RemoteDevice reDevice = RemoteDevice.getRemoteDevice(connection);

						System.out.println(TAG + "...Server is Connected to: \n" + 
						reDevice.getBluetoothAddress() + "\n" + 
						reDevice.getFriendlyName(false));
					}
					
					catch ( IOException e )
					{
						// print the error stack
						e.printStackTrace();
						e.getCause();
						System.exit(-1);
					}
					Thread clientThread = new Thread(new ServerCommsThread(connection));
					clientThread.start();
				}
				catch ( IOException e )
				{
					// print the error stack
					e.printStackTrace();
					e.getCause();
					System.exit(-1);
				}
			}

		}
		catch ( BluetoothStateException e )
		{
			// print the error stack
			e.printStackTrace();
			e.getCause();
			System.exit(-1);
		}
		catch ( IOException e )
		{
			// print the error stack
			e.printStackTrace();
			e.getCause();
			System.exit(-1);
		}
	}

}// end of Class
